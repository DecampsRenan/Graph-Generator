// On ajoute les d√©pendances
var app    = global.app,
	Dijkstra = require('./Dijkstra');

app.post('/get', function(req, res) {
	
	var graphe = {
		nodes: [
			{ data: { id: '1' } },
			{ data: { id: '2' } },
			{ data: { id: '3' } },
			{ data: { id: '4' } },
			{ data: { id: '5' } },
			{ data: { id: '6' } },
			{ data: { id: '7' } },
			{ data: { id: '8' } },
			{ data: { id: '9' } }
		],

		edges: [
			{ data: { id: '01', weight: 3, source: '2', target: '1' } },
			{ data: { id: '02', weight: 5, source: '2', target: '3' } },
			{ data: { id: '04', weight: 6, source: '2', target: '4' } },
			{ data: { id: '05', weight: 1, source: '2', target: '5' } },
			{ data: { id: '06', weight: 1, source: '2', target: '6' } },
			{ data: { id: '07', weight: 8, source: '2', target: '7' } },
			{ data: { id: '07', weight: 1, source: '3', target: '7' } },
			{ data: { id: '07', weight: 2, source: '3', target: '8' } },
			{ data: { id: '07', weight: 1, source: '3', target: '9' } },
			{ data: { id: '18', weight: 4, source: '1', target: '2' } },
			{ data: { id: '19', weight: 9, source: '1', target: '3' } }
		]
	};
	//var g = req.query.graphe;
	//console.log("caca :", req.params);
	
	var source = graphe.nodes[0].data.id, 
	sommets = [], 
	distance = [], 
	d;
	
	for (var i=1; i < graphe.nodes.length; i++) {
		sommets.push(parseInt(graphe.nodes[i].data.id));
		distance.push('x');
	}
	for (var j=0; j < graphe.edges.length; j++) {
		if (graphe.edges[j].data.source == source && graphe.edges[j].data.id) {
			distance[parseInt(graphe.edges[j].data.target)-2]=parseInt(graphe.edges[j].data.weight);
			graphe.edges.splice(j,1);
			j--;
		}	
	}
	
	d = new Dijkstra(source, sommets, distance, graphe);
	
	res.set({
		'Access-Control-Allow-Origin': '*'
	});

	console.log(d.path);
	res.json(d.path);
});
