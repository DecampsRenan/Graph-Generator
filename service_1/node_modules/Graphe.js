// Classe générant un graphe
var Graph = require('graph').Graph;

/**
 * Classe générant un objet graphe à partir
 * du fichier passé en paramètre.
 **/
var Graphe = function(nbSommets, densite) {

	this.g = new Graph();

	var MAX_EDGES_PER_NODE = nbSommets - 1,
		MIN_EDGES          = nbSommets - 1;

	var nodesNames = [];
	for(var i = 0; i < nbSommets; i++)
		nodesNames[i] = ('' + i);

	/*
	// Construction du graphe en fonction des paramètres
	for(var i = 0; i < nbSommets; i++) {

		// 1 - On choisi une paire de sommets aléatoire

		// 2 - On teste pour savoir si on les lie

		// 		3 - On ajoute un poids aléatoire

		var aleat = Math.floor(Math.random() * (100 - 1));
		
		// On ajoute un noeud
		if (aleat == 100 % densite) {
			this.g.set('1', '2');
		}
	}
	*/
};

Graphe.prototype = {

	toString: function() {
		return this.g.toString();
	},

	toJSON: function() {
		var obj = {
			nodes: [
				{ data: { id: 'a' } },
				{ data: { id: 'b' } },
				{ data: { id: 'c' } },
				{ data: { id: 'd' } },
				{ data: { id: 'e' } }
			],

			edges: [
				{ data: { id: 'a"e', weight: 1, source: 'a', target: 'e' } },
				{ data: { id: 'ab', weight: 3, source: 'a', target: 'b' } },
				{ data: { id: 'be', weight: 4, source: 'b', target: 'e' } },
				{ data: { id: 'bc', weight: 5, source: 'b', target: 'c' } },
				{ data: { id: 'ce', weight: 6, source: 'c', target: 'e' } },
				{ data: { id: 'cd', weight: 2, source: 'c', target: 'd' } },
				{ data: { id: 'de', weight: 7, source: 'd', target: 'e' } }
			]
		};

		return obj;
	},

	// Creates edge (a, b) with weight
	set: function(a, b, weight) {
		this.g.set(a, b, weight);
	},

	// Removes edge (a, b)
	del: function(a, b) {
		this.g.del(a, b);
	},

	get: function(a, b) {
		this.g.get(a, b);
	}
};

module.exports = Graphe;